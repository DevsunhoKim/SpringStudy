<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
  <!-- 사용자 정의 메모리 할당 -->
  <context:component-scan base-package="com.sist.*"/> 
  <!-- com.sist 를 포함하는 모든패키지 메모리 할당 (아래 어노테이션을 포함한 ***)
    @Component : 일반 클래스 (~Manager,MainClass)
    @Repository : DAO (저장소) 
    @Service : BI (DAO 여러개를 통합 후 사용)
    ==================
    @Controller : Model
    @RestController : Model => RestFul
                      => 다른 프로그램과 연결
                      => 자바 <=> 자바스크립트
                            JSON
                        => GET / POST / PUT / DELETE
    @ControllerAdvice: 웹에서 통합된 예외 처리
    ================== Web에서만 사용
    @Configuration : 5버전 권장
                     => XML 대신 자바로 대체 => 클래스 등록
    
    *** 스프링은 클래스 관리자
       => 생성 / 소멸 / 필요시에는 멤버변수 초기화
                      =================== 주입
                       => setter / 생성자 매개변수
                       
    메모리 할당시 필요한 데이터 주입 (DI)
     => 작은 의미: 멤버변수의 초기화
     => 큰 의미 : 클래스와 클래스의 연관관계 설정 => 메뉴얼
    @Autowired : 스프링안에 이미 생성되어 있는 클래스 객체 주소를 찾아서 자동주입
                 => getBean("")
    @PostConstruct : 메소드 호출이 가능 
                     생성시 자동 호출
                     => init-method
    @PreDestory : 소멸시에 자동 호출
                     => destory-method
    @Resource : 선택적으로 객체를 선택 => 1.8 까지 사용이 가능
    1.8 버전 호환성이 가장 좋다
      => 스프링부트 (3.0) . 스프링 6 : 람다
          => @RequestMapping 제거
            = @GetMapping / @PostMapping
            
    메모리 할당 요청
    ===============
    1. 클래스 한 개 <bean>
      => 라이브러리 클래스 (MyBatis)
    2. 패키지 단위 <contex:component-scan base-package=""> 
       => 사용자 정의 클래스
       => ~VO 클래스 => 데이터형
       => 대부분은 싱글턴
       <bean scope="prototype">
       @Component
       @Scope("prototype")  
    -->
  <!-- MyBatis 관련 -->
  <!-- 데이터베이스 연결과 관련된 정보를 모음 -->
  <bean id="ds"
      class="org.apache.commons.dbcp.BasicDataSource"
      p:driverClassName="oracle.jdbc.driver.OracleDriver"
      p:url="jdbc:oracle:thin:@localhost:1521:XE"
      p:username="hr"
      p:password="happy"/>
   <!-- maxAactive="8" maxIdle="8" maxWait="10000" -->
   <!-- MyBatis에 전송 
       getConnection , disConnection
   -->
   <bean id="ssf"
         class="org.mybatis.spring.SqlSessionFactoryBean"
         p:dataSource-ref="ds"
         />
    <!-- interface(mapper)를 구현하는 클래스로 전송 -->
    <bean id="mapper"
       class="org.mybatis.spring.mapper.MapperFactoryBean"
       p:sqlSessionFactory-ref="ssf"
       p:mapperInterface="com.sist.mapper.EmpMapper"
       />
     
</beans>
